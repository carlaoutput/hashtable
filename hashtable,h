/*//////////////////////////////////////////////////////////////////////////////
Carla Pastor 
COP4530. Project 5: Hash Tables and Its Applications        
Task 1: HashTable Class Template
HashTable in the namespace of cop4530.
Declaration File. 
*///////////////////////////////////////////////////////////////////////////////


#ifndef HASHTABLE_H
#define HASHTABLE_H

// Note: Public HashTable interfaces (K and V are the template parameters, i.e., the generic data type, which represent the
// key and value types, respectively)
// HashTable(size_t size = 101): constructor. Create a hash table, where the size of the vector is set to prime_below(size)
// (where size is default to 101), where prime_below() is a private member function of the HashTable and provided to us.
#include <sstream> //delete t later
#include<iostream> //standard input/output stream object
#include<stdio.h> //streams, input/Output 
#include<list> //list container
#include<fstream> //input/output 
#include<functional> //function objects similar to that of functions.
#include<cctype>//set of functions to classify and transform individual characters. note; remove this header later
#include<algorithm> //defines a collection of functions especially designed to be used on ranges of elements.
#include<vector> //defines the vector container class

using namespace std;
namespace cop4530
{
    static const unsigned int max_prime = 1301081; //max_prime is used by the helpful functions provided .
    static const unsigned int default_capacity = 11; //the default_capacity is used if the initial capacity of the underlying vector of the hash table is zero. 
    template<typename K, typename V>
    class HashTable
    {
    	public:
    
            explicit HashTable(size_t size = 101);
            ~HashTable(); // destructor. Delete all elements in hash table.
            bool contains(const K & k) const; //check if key k is in the hash table.
            bool match(const std::pair<K, V> &kv) const; //check if key-value pair is in the hash table. // CHECK FOR CONST, IS NEEDED
            bool insert(const std::pair<K, V> & kv); //add the key-value pair kv into the hash table. 
            bool insert (std::pair<K, V> && kv); //move version of insert.
            bool remove(const K & k); //delete the key k and the corresponding value if it is in the hash table. Return true if k is
            //deleted, return false otherwise (i.e., if key k is not in the hash table).
            void clear(); //delete all elements in the hash table
            bool load(const char *filename);  //load the content of the file with name filename into the hash table. In the file
            void dump() const; //display all entries in the hash table. If an entry contains multiple key-value pairs
            //size_t size(): return the number of elements in the hash table. // **************
            void properSz(size_t size);
            int sizee() const; //return the size of the hash table
            bool write_to_file(const char *filename) const; //write all elements in the hash table into a file with name filename. // CHECK FOR CONST, IS NEEDED
    		
        private: //Private HashTable interfaces
    
            void makeEmpty(); //delete all elements in the hash table. The public interface clear() will call this function.
            void rehash(); //Rehash function. Called when the number of elements in the hash table is greater than the size of the vector.
            size_t myhash(const K &k) const; //return the index of the vector entry where k should be stored.
            //two helpful functions to determine the proper prime numbers used in setting up the vector size.
            unsigned long prime_below (unsigned long); //call prime_below to determine the new proper underlying vector size.
            void setPrimes(std::vector<unsigned long>&); // Whenever you need to set hash table to a new
            int numPairs; //num pairs
    		vector<list<pair<K,V> > > myTupper;
    };

#include "hashtable.hpp"
}  

#endif
